// Code generated by MockGen. DO NOT EDIT.
// Source: user_image.go

// Package repository is a generated GoMock package.
package repository

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// GoMockUserImageRepo is a mock of UserImageRepo interface.
type GoMockUserImageRepo struct {
	ctrl     *gomock.Controller
	recorder *GoMockUserImageRepoMockRecorder
}

// GoMockUserImageRepoMockRecorder is the mock recorder for GoMockUserImageRepo.
type GoMockUserImageRepoMockRecorder struct {
	mock *GoMockUserImageRepo
}

// NewGoMockUserImageRepo creates a new mock instance.
func NewGoMockUserImageRepo(ctrl *gomock.Controller) *GoMockUserImageRepo {
	mock := &GoMockUserImageRepo{ctrl: ctrl}
	mock.recorder = &GoMockUserImageRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *GoMockUserImageRepo) EXPECT() *GoMockUserImageRepoMockRecorder {
	return m.recorder
}

// FindByUserID mocks base method.
func (m *GoMockUserImageRepo) FindByUserID(ctx context.Context, userID int64) ([]UserImage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByUserID", ctx, userID)
	ret0, _ := ret[0].([]UserImage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByUserID indicates an expected call of FindByUserID.
func (mr *GoMockUserImageRepoMockRecorder) FindByUserID(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByUserID", reflect.TypeOf((*GoMockUserImageRepo)(nil).FindByUserID), ctx, userID)
}

// StoreBulk mocks base method.
func (m *GoMockUserImageRepo) StoreBulk(ctx context.Context, images []UserImage) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreBulk", ctx, images)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreBulk indicates an expected call of StoreBulk.
func (mr *GoMockUserImageRepoMockRecorder) StoreBulk(ctx, images interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreBulk", reflect.TypeOf((*GoMockUserImageRepo)(nil).StoreBulk), ctx, images)
}
