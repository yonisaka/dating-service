// Code generated by MockGen. DO NOT EDIT.
// Source: user_subscription.go

// Package repository is a generated GoMock package.
package repository

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// GoMockUserSubscriptionRepo is a mock of UserSubscriptionRepo interface.
type GoMockUserSubscriptionRepo struct {
	ctrl     *gomock.Controller
	recorder *GoMockUserSubscriptionRepoMockRecorder
}

// GoMockUserSubscriptionRepoMockRecorder is the mock recorder for GoMockUserSubscriptionRepo.
type GoMockUserSubscriptionRepoMockRecorder struct {
	mock *GoMockUserSubscriptionRepo
}

// NewGoMockUserSubscriptionRepo creates a new mock instance.
func NewGoMockUserSubscriptionRepo(ctrl *gomock.Controller) *GoMockUserSubscriptionRepo {
	mock := &GoMockUserSubscriptionRepo{ctrl: ctrl}
	mock.recorder = &GoMockUserSubscriptionRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *GoMockUserSubscriptionRepo) EXPECT() *GoMockUserSubscriptionRepoMockRecorder {
	return m.recorder
}

// FindByUserID mocks base method.
func (m *GoMockUserSubscriptionRepo) FindByUserID(ctx context.Context, userID int64) (*UserSubscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByUserID", ctx, userID)
	ret0, _ := ret[0].(*UserSubscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByUserID indicates an expected call of FindByUserID.
func (mr *GoMockUserSubscriptionRepoMockRecorder) FindByUserID(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByUserID", reflect.TypeOf((*GoMockUserSubscriptionRepo)(nil).FindByUserID), ctx, userID)
}

// Store mocks base method.
func (m *GoMockUserSubscriptionRepo) Store(ctx context.Context, userSubscription UserSubscription) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Store", ctx, userSubscription)
	ret0, _ := ret[0].(error)
	return ret0
}

// Store indicates an expected call of Store.
func (mr *GoMockUserSubscriptionRepoMockRecorder) Store(ctx, userSubscription interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Store", reflect.TypeOf((*GoMockUserSubscriptionRepo)(nil).Store), ctx, userSubscription)
}
