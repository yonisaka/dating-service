// Code generated by MockGen. DO NOT EDIT.
// Source: user.go

// Package repository is a generated GoMock package.
package repository

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// GoMockUserRepo is a mock of UserRepo interface.
type GoMockUserRepo struct {
	ctrl     *gomock.Controller
	recorder *GoMockUserRepoMockRecorder
}

// GoMockUserRepoMockRecorder is the mock recorder for GoMockUserRepo.
type GoMockUserRepoMockRecorder struct {
	mock *GoMockUserRepo
}

// NewGoMockUserRepo creates a new mock instance.
func NewGoMockUserRepo(ctrl *gomock.Controller) *GoMockUserRepo {
	mock := &GoMockUserRepo{ctrl: ctrl}
	mock.recorder = &GoMockUserRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *GoMockUserRepo) EXPECT() *GoMockUserRepoMockRecorder {
	return m.recorder
}

// Find mocks base method.
func (m *GoMockUserRepo) Find(ctx context.Context, preferences ...UserPreference) ([]User, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range preferences {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Find", varargs...)
	ret0, _ := ret[0].([]User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *GoMockUserRepoMockRecorder) Find(ctx interface{}, preferences ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, preferences...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*GoMockUserRepo)(nil).Find), varargs...)
}

// FindByEmail mocks base method.
func (m *GoMockUserRepo) FindByEmail(ctx context.Context, email string) (*User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByEmail", ctx, email)
	ret0, _ := ret[0].(*User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByEmail indicates an expected call of FindByEmail.
func (mr *GoMockUserRepoMockRecorder) FindByEmail(ctx, email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByEmail", reflect.TypeOf((*GoMockUserRepo)(nil).FindByEmail), ctx, email)
}

// FindByID mocks base method.
func (m *GoMockUserRepo) FindByID(ctx context.Context, id int64) (*User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", ctx, id)
	ret0, _ := ret[0].(*User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *GoMockUserRepoMockRecorder) FindByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*GoMockUserRepo)(nil).FindByID), ctx, id)
}

// Store mocks base method.
func (m *GoMockUserRepo) Store(ctx context.Context, user *User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Store", ctx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// Store indicates an expected call of Store.
func (mr *GoMockUserRepoMockRecorder) Store(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Store", reflect.TypeOf((*GoMockUserRepo)(nil).Store), ctx, user)
}
