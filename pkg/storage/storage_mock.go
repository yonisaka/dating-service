// Code generated by MockGen. DO NOT EDIT.
// Source: storage.go

// Package storage is a generated GoMock package.
package storage

import (
	context "context"
	url "net/url"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// GoMockStorage is a mock of Storage interface.
type GoMockStorage struct {
	ctrl     *gomock.Controller
	recorder *GoMockStorageMockRecorder
}

// GoMockStorageMockRecorder is the mock recorder for GoMockStorage.
type GoMockStorageMockRecorder struct {
	mock *GoMockStorage
}

// NewGoMockStorage creates a new mock instance.
func NewGoMockStorage(ctrl *gomock.Controller) *GoMockStorage {
	mock := &GoMockStorage{ctrl: ctrl}
	mock.recorder = &GoMockStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *GoMockStorage) EXPECT() *GoMockStorageMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *GoMockStorage) Delete(ctx context.Context, parent, bame string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, parent, bame)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *GoMockStorageMockRecorder) Delete(ctx, parent, bame interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*GoMockStorage)(nil).Delete), ctx, parent, bame)
}

// Get mocks base method.
func (m *GoMockStorage) Get(ctx context.Context, parent, name string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, parent, name)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *GoMockStorageMockRecorder) Get(ctx, parent, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*GoMockStorage)(nil).Get), ctx, parent, name)
}

// GetSignedURL mocks base method.
func (m *GoMockStorage) GetSignedURL(parent, name string) (*url.URL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSignedURL", parent, name)
	ret0, _ := ret[0].(*url.URL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSignedURL indicates an expected call of GetSignedURL.
func (mr *GoMockStorageMockRecorder) GetSignedURL(parent, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSignedURL", reflect.TypeOf((*GoMockStorage)(nil).GetSignedURL), parent, name)
}

// Put mocks base method.
func (m *GoMockStorage) Put(ctx context.Context, parent, name string, contents []byte, cacheAble bool, contentType string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Put", ctx, parent, name, contents, cacheAble, contentType)
	ret0, _ := ret[0].(error)
	return ret0
}

// Put indicates an expected call of Put.
func (mr *GoMockStorageMockRecorder) Put(ctx, parent, name, contents, cacheAble, contentType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*GoMockStorage)(nil).Put), ctx, parent, name, contents, cacheAble, contentType)
}
