// Code generated by MockGen. DO NOT EDIT.
// Source: kvs.go

// Package kvs is a generated GoMock package.
package kvs

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "go.uber.org/mock/gomock"
)

// GoMockClient is a mock of Client interface.
type GoMockClient struct {
	ctrl     *gomock.Controller
	recorder *GoMockClientMockRecorder
}

// GoMockClientMockRecorder is the mock recorder for GoMockClient.
type GoMockClientMockRecorder struct {
	mock *GoMockClient
}

// NewGoMockClient creates a new mock instance.
func NewGoMockClient(ctrl *gomock.Controller) *GoMockClient {
	mock := &GoMockClient{ctrl: ctrl}
	mock.recorder = &GoMockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *GoMockClient) EXPECT() *GoMockClientMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *GoMockClient) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *GoMockClientMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*GoMockClient)(nil).Close))
}

// FlushAll mocks base method.
func (m *GoMockClient) FlushAll(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FlushAll", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// FlushAll indicates an expected call of FlushAll.
func (mr *GoMockClientMockRecorder) FlushAll(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FlushAll", reflect.TypeOf((*GoMockClient)(nil).FlushAll), ctx)
}

// Get mocks base method.
func (m *GoMockClient) Get(ctx context.Context, key string) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, key)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *GoMockClientMockRecorder) Get(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*GoMockClient)(nil).Get), ctx, key)
}

// HGetAll mocks base method.
func (m *GoMockClient) HGetAll(ctx context.Context, key string) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HGetAll", ctx, key)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HGetAll indicates an expected call of HGetAll.
func (mr *GoMockClientMockRecorder) HGetAll(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HGetAll", reflect.TypeOf((*GoMockClient)(nil).HGetAll), ctx, key)
}

// HSet mocks base method.
func (m *GoMockClient) HSet(ctx context.Context, key, field string, value interface{}) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HSet", ctx, key, field, value)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HSet indicates an expected call of HSet.
func (mr *GoMockClientMockRecorder) HSet(ctx, key, field, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HSet", reflect.TypeOf((*GoMockClient)(nil).HSet), ctx, key, field, value)
}

// Set mocks base method.
func (m *GoMockClient) Set(ctx context.Context, key string, value interface{}, expire time.Duration) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", ctx, key, value, expire)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Set indicates an expected call of Set.
func (mr *GoMockClientMockRecorder) Set(ctx, key, value, expire interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*GoMockClient)(nil).Set), ctx, key, value, expire)
}
